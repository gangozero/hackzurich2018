// Code generated by "esc -o static.go -pkg main static"; DO NOT EDIT.

package main

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	return nil, nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// FS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func FS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// Dir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func Dir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// FSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func FSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// FSMustByte is the same as FSByte, but panics if name is not present.
func FSMustByte(useLocal bool, name string) []byte {
	b, err := FSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// FSString is the string version of FSByte.
func FSString(useLocal bool, name string) (string, error) {
	b, err := FSByte(useLocal, name)
	return string(b), err
}

// FSMustString is the string version of FSMustByte.
func FSMustString(useLocal bool, name string) string {
	return string(FSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/static/.DS_Store": {
		local:   "static/.DS_Store",
		size:    6148,
		modtime: 1537054397,
		compressed: `
H4sIAAAAAAAC/+yYMarDMBBEZ/RdGH6jMqWaHCA3EMY5QS6QIldIr6MHswMRiZLahHlgnsCWDTbs7hgA
l/vtBGQAM8I4Ysis443Ural7GGOMMWbfUP3936/CGDOoD0WucgtT55M8veYAxtbNVW5h6rokT/IsZ7nI
VW5hFS0qfFBPphIKlUJY5OrvaMyIv1De+v/5c/43xvxyn5/Wy7o8A8FwELh2629DQIqfhYdurwcBY3bG
IwAA//9qAIhtBBgAAA==
`,
	},

	"/static/index.html": {
		local:   "static/index.html",
		size:    8600,
		modtime: 1537053574,
		compressed: `
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
`,
	},

	"/static/js/Api.js": {
		local:   "static/js/Api.js",
		size:    1225,
		modtime: 1537055292,
		compressed: `
H4sIAAAAAAAC/4RT0W7TMBR9z1dc+SmF4CQbk6aUICHxhBBM2sMkEEJectMaXDuyHbpR5d+R46xJ3VT4
oY2vzzm2zz2uBDMGPrQcDhEAQKWksbqrrNLxaqy5IdBCpwWUQPamSFOhKia2ytjiNrvN0r0h6yM2TUN0
ntH8ht7Qtwtou+WGGlX9RgslSNzDAz7eD/O40yJxEmS1iKdK7tAYtkEooelkZbmSEOMflHZ++JeLKYFU
qI0H0JpZNtPtI/87/BmU9R2qVmDcCmYbpXcJtEPBCUdzVQsvkAde2y2Uxzk1/C/SvauuJ06jNMSeyIHL
mWx4XgutUxvWv/Mf6wWAuwSUAdcNNphRAHGdcp8kOcO07FkoVhcLdDc6g/onrwsg7usNgdfQUl4ni+Ad
+6V0AXmWXVjn0q0P3dugvRst+qbkZPHgXwItfVqdafQnlf7UC5c3YzWXm4/ej0/3X79QX+HNcxy0OszD
RA1A86y5SCwj+yi6SAgOcqJ+IL5JpABSMcEfNbNIEiBjX0gBB2IqlEgKyPvJgdW4eR/5nf/j59PnMQLh
g26ZtrO4+vimcD1djTcQH+nwbmCESdVoOy3hekbrAYXBgP3e7/cKri4p5GcKy7ir81fb/wsAAP//8Zm+
S8kEAAA=
`,
	},

	"/static/js/Person.js": {
		local:   "static/js/Person.js",
		size:    1466,
		modtime: 1537053313,
		compressed: `
H4sIAAAAAAAC/4xUzW7bPBC85ynmuwTWZ0eoD73UVYqipwItELRAER9piZYWoUiDXMZ2E797QdG2fiKh
1cnYnZ0Z7Y6cK+EcHqR1RuPl5gYAcqMdW5+zsbPDAscEL009PFyRS0kTPyLDYfW2vkaG46B+GMEeR3C5
qXdKsvwhdGFqZGDr5QCjTP4kC2TYCuWGzWdytFFyopt7xw3tWHNjhC0miakWZaDVXqlBqxLuwez8bmKS
rSD9kwVTPsUdROfzPenC7FMqvhivWdqIOsWTKCOKr8HDbCe46h5ESYaTahu2VZFruZ+FBdVlMC33iMNJ
26a6TJ0NngJjv2500At2vc6ZjMasKxmeIHndCtVlS3Dq+t4L9fTZGq+LWUGOLW184FtgpwRvja2TS+ga
7S16MNzedi839NC0gkLMy+zK2XqBVE4OxoLKOZb/ZVk30a+vl2z2GuuhcC/Y7fxqHHTsgtZ90KjBf3u3
dtejWx/OdTSa7zuk4vHirJQc8d9Mft7NAsv2Sqmj3zLdU8EV7rDsxOjKtZ7mOo5wVZLKigdk150GbyP/
F0Gm91n0tHJvrdS8QE16gVocRt/5l1DI8F1wlcZcxp9xW0mC/9Gv4B7v0vf4hCU+4G6ZYI6z0KqX2zP1
fRaVrWRv9Vtoc+4O/mNw+xf4uRknLu9/+hMAAP//RMDmLroFAAA=
`,
	},

	"/static/js/Platform.js": {
		local:   "static/js/Platform.js",
		size:    2609,
		modtime: 1537044938,
		compressed: `
H4sIAAAAAAAC/6xWTW+jOhTd51fcbiroI7y0fW8VUanNqouRqhnNVJqqCwcuwYpjR7Yp/VD++8iGgDFO
uxk2ibn3+B6f+2FyRpSCB0Z0KeQOPmYzAIBccKVlnWshI0XfMYYP+948uqIqNS8hA/OzHFv2KPbM2J6e
PUuOXEvCfgvumg9tRIX6kbBtVFClJV3XmgruRi2FhMjSAgqUu7Fct5487FEqwSFzPZ+ow8k8rVPaELa9
laLmxSh+YrHxADm4jElRPNhdI0v0hArOKi0p0yijsua52R4iZD53ibqWHKIzZOlaEFlg4caPl7OvNO3t
5uwc/oX/BnyrzLvgeNsZr0PGO2u8CCNXA9KzroUsUJqdvxFdpSUTQkZ9taQNLXRlgPEyCDRRj1tcwFXY
aTVyuvblKCmzWkT2jAkskqN3ArxmLF5+4n/nOHeUkonKn+6wcoAd3z7uGLYjW/xFFV0zjOJRI1BuGnHV
RvypUKpoVF4MNXTd53NLGfKN1XiinkJWdgjfRLm+L0wvo77nGuULYU6JjmKb54VIyEXNNWTw/3JsayrK
EOzEgBtYwPl553oDC7/S26ZnpXuAJ4N8TvNaabEzdGWNyymKvuN8Pn1vQ/mGw5ghLTt6WZYZTjlDIvtj
WyncXB0SaCgvRJNKLCWq6jvROM7XKJOuWH9beJN4wlgXK6iOrY1KNKsuP1eLsd0folb/8BB1Bqml2DtO
ZuhR1rN9+tJyC+1lp+3R4WRq7Vx1z1gSpk74DQedZ3A59fEy32d/0KctgTDXtUSyDW36RXEN7IOKBsvN
9+pKTmmijQbd8odZPhKqKd+crPFgwTpDt3PtpxZPgGGpE5B0U+kENlLU+0AZt8M7a91gbkFOn3SNz4+N
HriPXyGzKPjHvR7sX0l4IXZRDBdtHE+SFv82vld84HDPVGg4xstpbiZCv8KZqQEzp976vye8/ItsDpcD
zo9urKN9QsVgurX/SuHYwINdRK8JvMXhHrPpsRHtrdKmK93XqoranQI49wvkc08+HZ7+l89h9icAAP//
xnrXPjEKAAA=
`,
	},

	"/static/js/Size.js": {
		local:   "static/js/Size.js",
		size:    157,
		modtime: 1537018464,
		compressed: `
H4sIAAAAAAAC/0rOSSwuVgjOrEpVqOZSUFBQSM7PKy4pKk0uyS/SqNBRqNRRKM9MKcnQUchIzUzPKNGE
KgOBkozMYr0KBVuFCmtUsUoFW4VKNDGwKQq2ENPQ5CBGK9hC7YDI1nLVAgIAAP//AnTKup0AAAA=
`,
	},

	"/static/js/Train.js": {
		local:   "static/js/Train.js",
		size:    2470,
		modtime: 1537048819,
		compressed: `
H4sIAAAAAAAC/7RWTU/cMBC951cMN6ewAYroZWuk9lAJqZWq0gMS4uAmE2LV2JHt7IdQ/ntlO2TjbPYD
VexpxzOeN35vxk4umDHwWzMu4SVJAAByJY3VTW6VJn7B/bi8P+sNY1U9MFVjB9Z683fJC1ttzAr5U2W9
mcJLv2wrbjIu74E6lHm87qGABsiRz+EC9fAjz2oy1xoorEdrvkSgodSRL9QLtCt85K1R1QKBwsNj8LSB
PqY1XyBxJ0ziHawovjgnE4ak843TEw4GRQnUR85HLi7tbeFIQHsrLeoFE6RsZG65kkCGXHp1UJTZCk4p
XM7PzyMXL4F0bkppiPTMjnN4bIFM93i+hnS+FbXkslDLzFhm0fPozTtn+q66s6qusYj2tb3Vnr3u0Fhq
NNUvl+YcPqURpwXWTNvopIdJ20vYTsYiR6k0kAXTUAOXISzIPsmXh61RGyWBDqMf6sdt4kLgJGybHFTN
Nf1UEa9x4U80Azt0ndB0UPqgv9+i+ncs7f9J/kcxXbxR8YNjEpXkdH1WC3RbSiYMzpNp8fnx4o9051O6
Z/5oHtbqBvdK/041uI46qTOh8r9YTKVyv1dutovcHGUNM9+9k26H4kJc086ud8GERKGUvWgtoDDYZ/0M
s8sjc/5gtso0k4V6JincwEV2vQMi2b8yMZgnnqZ3uT+/uj7h8ukbl9xUW3fowYm6iicqen6GwyDQQq4a
6Z66jxebEpcVFwgkuG7gYmuC3MZVz69qZEFiqj8AGbyyM7hKUzgd33Yuy/qYLN17PEizlae/fSUu4ac3
yOoM1iPiu7vXhgeKWZ5Pdl4Xtqc3u4h9Ez34WMjqxlQk7ElH1XuWZ7PN3rb7fGiTpP0XAAD//6TTg86m
CQAA
`,
	},

	"/static/js/train-drawer.js": {
		local:   "static/js/train-drawer.js",
		size:    528,
		modtime: 1537052592,
		compressed: `
H4sIAAAAAAAC/4yQYUoDMRCF/+8pHvVPq7FgFRGWvYT1AmGSdgMhC3G0ieLdxcya7rIK/ZNk3pu8fJnD
WyB2Q4CJ+vQStQtr/lkVjtGZvfuwCsRJgXR4168bfDYA4C0joUPp3aa2irmK+SyenOG+GqU6m711x56r
K2XbFL9CPVvidVLISsLUeG2KuboyZMjuVoV40/6VgBvcKWTZBOsWu980OU8T7x8enyaJX02zHNglbDT4
IUrKOMGE6642CGteSoK4kEfcmV4M4rQ9OO/3nL1FJ++2M+s/XPnedwAAAP//vr3HYBACAAA=
`,
	},

	"/": {
		isDir: true,
		local: "",
	},

	"/static": {
		isDir: true,
		local: "static",
	},

	"/static/js": {
		isDir: true,
		local: "static/js",
	},
}
